{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CH01_03. [구현강의]Affine_Functions.ipynb","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"WjSV2rd4zSyC"},"source":["#Lecture.O.Introduction"]},{"cell_type":"code","metadata":{"id":"Pu9uzouFz4rh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658459251367,"user_tz":-540,"elapsed":1557,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"74fa9795-ac26-4e41-c503-f94bee4f22a6"},"source":["import numpy as np\n","import tensorflow as tf\n","\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import Layer\n","\n","from tensorflow.keras.layers import Conv2D\n","from tensorflow.keras.layers import AveragePooling2D\n","from tensorflow.keras.layers import Flatten\n","from tensorflow.keras.layers import Dense\n","\n","from tensorflow.keras.datasets import mnist\n","\n","from tensorflow.keras.losses import SparseCategoricalCrossentropy\n","\n","\n","class ConvLayer(Layer):\n","\tdef __init__(self,filters,padding,pool = True):\n","\t\tsuper(ConvLayer,self).__init__()\n","\t\tself.pool = pool\n","\t\tself.conv = Conv2D(filters=6, kernel_size=5, padding='same', activation='tanh')\n","\t\tif self.pool == True:\n","\t\t\tself.conv_pool = AveragePooling2D(pool_size=2,strides=2)\n","\t\t\n","\tdef call(self, x):\n","\t\tx = self.conv(x)\n","\t\tif self.pool ==True:\n","\t\t\tx = self.conv_pool(x)\n","\t\treturn x\n","\n","\n","class LeNet(Model):\n","\tdef __init__(self):\n","\t\tsuper(LeNet,self).__init__()\n","\t\tself.conv1 = ConvLayer(filters=6, padding='same')\n","\t\tself.conv2= ConvLayer(filters=16, padding='valid')\n","\t\tself.conv3= ConvLayer(filters=120, padding='valid', pool=False)\n","\t\tself.flatten = Flatten()\n","\t\tself. dense1 = Dense(units=84, activation='tanh')\n","\t\tself. dense2 = Dense(units=10, activation='softmax')\n","\t\n","\tdef call(self, x):\n","\t\tx = self.conv1(x)\n","\t\tx = self.conv2(x)\n","\t\tx = self.conv3(x)\n","\t\tx = self.flatten(x)\n","\t\tx = self.dense1(x)\n","\t\tx = self.dense2(x)\n","\t\treturn x\n","\n","(train_images, train_labels) = mnist.load_data()[0]\n","\n","train_images = np.expand_dims(train_images, axis=3).astype(np.float32)\n","train_labels = train_labels.astype(np.int32)\n","\n","train_ds = tf.data.Dataset.from_tensor_slices((train_images, train_labels))\n","train_ds = train_ds.batch(32)\n","\n","model = LeNet()\n","loss_object = SparseCategoricalCrossentropy()\n","\n","for images,labels in train_ds:\n","\tpredictions = model(images)\n","\tloss = loss_object(labels,predictions)\n","\tprint(loss)\n","\tbreak"],"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor(2.3173246, shape=(), dtype=float32)\n"]}]},{"cell_type":"markdown","metadata":{"id":"Y0aYOWcoz5XH"},"source":["# Affine Function "]},{"cell_type":"markdown","metadata":{"id":"amuoj4ILQT6I"},"source":[""]},{"cell_type":"code","metadata":{"id":"ZOQH8JrDFocc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658459274849,"user_tz":-540,"elapsed":381,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"8c35c26a-6080-4a33-add6-57d63d67f911"},"source":["import tensorflow as tf\n","  \n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.layers import Conv2D\n","\n","x = tf.constant([[10.]]) #input setting(Note : input -> matrix)\n","dense = Dense(units=1, activation='linear') #imp.an affine function\n","\n","y_tf = dense(x) #forward propagation + p arams initialization\n","W, B = dense.get_weights() # get weight, bias\n","y_man = tf.linalg.matmul(x, W) + B # forward propagation(manual)\n","\n","# print results\n","print('========Input/Weight/Bias=========')\n","print(\"x : {}\\n{}\\n\".format(x.shape, x.numpy()))\n","print(\"W : {}\\n{}\\n\".format(x.shape, W))\n","print(\"B : {}\\n{}\\n\".format(x.shape, B))\n","\n","print('========Output/Weight/Bias=========')\n","print(\"y(Tensorflow):{}\\n{}\\n)\".format(y_tf.shape, y_tf.numpy()))\n","print(\"y(Manual): {}\\n{}\\n\".format(y_man.shape, y_man.numpy()))"],"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["========Input/Weight/Bias=========\n","x : (1, 1)\n","[[10.]]\n","\n","W : (1, 1)\n","[[-1.307072]]\n","\n","B : (1, 1)\n","[0.]\n","\n","========Output/Weight/Bias=========\n","y(Tensorflow):(1, 1)\n","[[-13.070721]]\n",")\n","y(Manual): (1, 1)\n","[[-13.070721]]\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"mjb_e0rvz7j6"},"source":["#Params Initalization"]},{"cell_type":"code","metadata":{"id":"JByiPvy9zc-a","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658459294685,"user_tz":-540,"elapsed":367,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"4aa2338e-897e-4a17-805f-38b91abcba4d"},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.initializers import Constant\n","\n","x = tf.constant([[10.]]) #input setting(Note : input -> matrix)\n","\n","\n","# weingt/bias setting\n","w,b = tf.constant(10.), tf.constant(20.)  \n","\n","w_init, b_init = Constant(w), Constant(b)\n","\n","dense = Dense(units=1,\n","              activation='linear',\n","              kernel_initializer=w_init,\n","              bias_initializer=b_init)\n","\n","y_tf = dense(x)\n","\n","print(y_tf) \n","\n","w, b = dense.get_weights() \n","\n","print(\"W :{}\\n{}\\n\".format(w.shape, w))\n","\n","print(\"W :{}\\n{}\\n\".format(b.shape, b ))"],"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor([[120.]], shape=(1, 1), dtype=float32)\n","W :(1, 1)\n","[[10.]]\n","\n","W :(1,)\n","[20.]\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"hQvo3OneWI0X"},"source":["# AFfine Function with n Features"]},{"cell_type":"code","metadata":{"id":"nlcgemXoWPHO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658459310344,"user_tz":-540,"elapsed":3,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"c92477c7-8e36-491c-8ef5-1540d498986d"},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.layers import Dense\n","x = tf.random.uniform(shape=(1,10), minval=0, maxval=10)\n","\n","dense = Dense(units=1)\n","\n","y_tf = dense(x)\n","\n","W,B = dense.get_weights()\n","\n","y_man = tf.linalg.matmul(x, W)+B\n","\n","print('========Input/Weight/Bias=========')\n","print(\"x : {}\\n{}\\n\".format(x.shape, x.numpy()))\n","print(\"W : {}\\n{}\\n\".format(x.shape, W))\n","print(\"B : {}\\n{}\\n\".format(x.shape, B))\n","\n","print('========output/Weight/Bias=========')\n","print(\"y(Tensorflow):{}\\n{}\\n)\".format(y_tf.shape, y_tf.numpy()))\n","print(\"y(Manual): {}\\n{}\\n\".format(y_man.shape, y_man.numpy()))"],"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["========Input/Weight/Bias=========\n","x : (1, 10)\n","[[8.762402  3.6250532 6.666216  7.1067247 2.548387  1.7074847 6.127204\n","  2.3128855 3.4836948 7.577331 ]]\n","\n","W : (1, 10)\n","[[-0.07285273]\n"," [-0.26374587]\n"," [ 0.6729757 ]\n"," [ 0.07776195]\n"," [ 0.17465329]\n"," [-0.4778546 ]\n"," [-0.23899466]\n"," [-0.5651001 ]\n"," [-0.16464484]\n"," [-0.5452822 ]]\n","\n","B : (1, 10)\n","[0.]\n","\n","========output/Weight/Bias=========\n","y(Tensorflow):(1, 1)\n","[[-4.403206]]\n",")\n","y(Manual): (1, 1)\n","[[-4.403206]]\n","\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"mRj7fH0k4MZF"},"execution_count":null,"outputs":[]}]}