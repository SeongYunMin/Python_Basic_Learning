{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CH06_03.[구현강의]_Padding_and_Strides.ipynb","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"qbSJso4sA6Da"},"source":["# 3D Max Pooling"]},{"cell_type":"code","metadata":{"id":"uBLfjH5bb3WS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460764096,"user_tz":-540,"elapsed":3751,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"ad3728b5-e135-4d23-dfc4-188936414cb0"},"source":["import math\n","import numpy as np\n","import tensorflow as tf\n","\n","from tensorflow.keras.layers import MaxPooling2D\n","\n","N, n_H, n_W, n_C = 1, 5, 5, 3\n","f, s= 2, 2\n","\n","x = tf.random.normal(shape=(N, n_H, n_W, n_C))\n","# print(\"x: (}\\n(}°. format (x. shape,\n","#                               np.transpose(x.numpy().squeeze(), {2, 0, 1))))\n","\n","pool_max = MaxPooling2D(pool_size=f, strides=s)\n","pooled_max = pool_max(x)\n","\n","pooled_max_t = np.transpose(pooled_max.numpy().squeeze(), (2, 0, 1))\n","print(\"pooled_max(Tensorflow): {}\\n{}\".format(pooled_max.shape,\n","                                              pooled_max_t))\n","\n","###\n","x = x.numpy().squeeze()\n","n_H_ = math. floor((n_H - f)/s + 1)\n","n_W_ = math.floor((n_W - f)/s + 1)\n","pooled_max_man = np.zeros(shape=(n_H_, n_W_, n_C))\n","\n","for c in range(n_C):\n","  c_image = x[:, :, c]\n","  h_ = 0\n","  \n","  for h in range(0, n_H - f + 1, s):\n","    w_=0\n","    for w in range(0, n_W - f + 1 , s):\n","      window = c_image[h : h+f, w : w+f]\n","      pooled_max_man[h_, w_, c] = np.max(window)\n","      \n","      w_ +=1\n","    h_ +=1\n","\n","pooled_max_t = np.transpose(pooled_max_man, (2, 0, 1))\n","print(\"pooled max(Manual): {}\\n{}\".format (pooled_max_man.shape,\n","                                            pooled_max_t))"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["pooled_max(Tensorflow): (1, 2, 2, 3)\n","[[[0.836858   1.4023974 ]\n","  [1.3800504  0.8841217 ]]\n","\n"," [[0.7608709  1.3966529 ]\n","  [1.2364497  0.55364686]]\n","\n"," [[1.3239539  0.9854049 ]\n","  [0.28342047 1.2282937 ]]]\n","pooled max(Manual): (2, 2, 3)\n","[[[0.83685797 1.40239739]\n","  [1.38005042 0.88412172]]\n","\n"," [[0.76087087 1.39665294]\n","  [1.23644972 0.55364686]]\n","\n"," [[1.32395387 0.98540491]\n","  [0.28342047 1.22829366]]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"qi7dViN8A6km"},"source":["# ZeroPadding2D Layer"]},{"cell_type":"code","metadata":{"id":"M3rsZHEuA6w2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460770283,"user_tz":-540,"elapsed":290,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"bdaec1a9-eda0-4b0c-d4e6-a027ce9864eb"},"source":["import numpy as np\n","import tensorflow as tf\n","\n","from tensorflow.keras.layers import ZeroPadding2D\n","\n","images = tf.random.normal(shape=(1, 28, 28, 3))\n","\n","print (images.shape)\n","# print(np.transpose(images.numpy().squeeze(), (2, 0, 1)))\n","\n","zero_padding = ZeroPadding2D(padding=2)\n","y = zero_padding(images)\n","print (y.shape)\n","# print(np.transpoge(y.numpy().squeeze(), (2, 0, 1)))"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, 28, 28, 3)\n","(1, 32, 32, 3)\n"]}]},{"cell_type":"markdown","metadata":{"id":"SQ7QzYzGA7Hm"},"source":["# Zero Padding with Conv2D Layers"]},{"cell_type":"code","metadata":{"id":"hHeR6iyzA7Uu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460774576,"user_tz":-540,"elapsed":397,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"3600ef28-5efb-403f-9849-0c8e02f8a012"},"source":["import tensorflow as tf\n","from tensorflow.keras.layers import Conv2D\n","\n","images = tf.random.normal(shape=(1, 28, 28, 3))\n","\n","conv = Conv2D(filters=1, kernel_size=3, padding='same')\n","y = conv(images)\n","print(y.shape)"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, 28, 28, 1)\n"]}]},{"cell_type":"markdown","metadata":{"id":"BgcVGcktA7fO"},"source":["# strides in Conv2D Layers"]},{"cell_type":"code","metadata":{"id":"d5j5VJpGA7tO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460781067,"user_tz":-540,"elapsed":529,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"7c18480a-3f71-4522-c431-7512a8f23002"},"source":["import tensorflow as tf\n","from tensorflow.keras.layers import Conv2D\n","\n","images = tf.random.normal(shape=(1, 28, 28, 3))\n","\n","conv = Conv2D(filters=1, kernel_size=3, padding='valid', strides=2)\n","print(images.shape)\n","print(y.shape)"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, 28, 28, 3)\n","(1, 28, 28, 1)\n"]}]},{"cell_type":"markdown","metadata":{"id":"pit1l3jgEY4L"},"source":["# Strides in Pooling Layers"]},{"cell_type":"code","metadata":{"id":"5UhjdGe4EZFO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460783905,"user_tz":-540,"elapsed":5,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"7fd2ff65-c4f9-431f-f4a6-e16cf44dac42"},"source":["import tensorflow as tf\n","from tensorflow.keras.layers import Conv2D\n","\n","images = tf.random.normal(shape=(1, 28, 28, 3))\n","\n","pool = MaxPooling2D(pool_size=3, strides=2)\n","y = pool(images)\n","\n","print(images.shape)\n","print(y.shape)"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, 28, 28, 3)\n","(1, 13, 13, 3)\n"]}]}]}