{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CH07_02.[구현강의]_Shapes_in_CNNs..ipynb","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"s4rcf29YFPR3"},"source":["# Shapes in the Feature Extractors"]},{"cell_type":"code","metadata":{"id":"4Ht5oZJJbzcn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460828710,"user_tz":-540,"elapsed":6754,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"ba80ba34-3fa8-4560-bcf4-dd52770b9487"},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.layers import Conv2D\n","from tensorflow.keras.layers import MaxPooling2D\n","from tensorflow.keras.layers import Flatten\n","\n","\n","N, n_H, n_W, n_C = 32, 28, 28, 3\n","n_conv_filter = 5\n","k_size = 3\n","pool_size, pool_strides = 2, 2\n","batch_size = 32\n","\n","x = tf.random.normal(shape=(N, n_H, n_W, n_C))\n","\n","conv1 = Conv2D(filters=n_conv_filter, kernel_size=k_size,\n","               padding='same', activation='relu')\n","\n","conv1_pool = MaxPooling2D(pool_size=pool_size, strides=pool_strides)\n","\n","conv2 = Conv2D(filters=n_conv_filter, kernel_size=k_size,\n","              padding='same', activation='relu')\n","\n","conv2_pool = MaxPooling2D(pool_size=pool_size, strides=pool_strides)\n","\n","flatten = Flatten()\n","\n","print(\"Input: {}\\n\".format(x.shape))\n","\n","x = conv1(x)\n","W, B = conv1.get_weights()\n","print(\"W/B: {}/{}\".format(W.shape, B.shape))\n","print(\"After convl: {}\".format(x.shape))\n","x = conv1_pool(x)\n","print(\"After convl pool: {}\".format(x.shape))\n","\n","x = conv2(x)\n","W,B = conv2.get_weights()\n","print(\"W/B: {}/()\".format(W.shape, B.shape))\n","print(\"After conv2: {}\".format(x.shape))\n","x = conv2_pool(x)\n","print(\"After conv2 pool: {}\".format(x.shape))\n","\n","x = flatten(x)\n","print(\"After flatten: {}\".format(x.shape))"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Input: (32, 28, 28, 3)\n","\n","W/B: (3, 3, 3, 5)/(5,)\n","After convl: (32, 28, 28, 5)\n","After convl pool: (32, 14, 14, 5)\n","W/B: (3, 3, 5, 5)/()\n","After conv2: (32, 14, 14, 5)\n","After conv2 pool: (32, 7, 7, 5)\n","After flatten: (32, 245)\n"]}]},{"cell_type":"markdown","metadata":{"id":"BWd2sxJ7FPhP"},"source":["# Shapes in the Classifier"]},{"cell_type":"code","metadata":{"id":"eAuAMs8LFPxv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460829756,"user_tz":-540,"elapsed":3,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"aa560352-f16f-4746-d6c5-931faa0e3b1f"},"source":["from tensorflow.keras.layers import Dense\n","\n","n_neurons = [50, 25, 10]\n","\n","densel = Dense(units=n_neurons[0], activation='relu' )  \n","dense2 = Dense(units=n_neurons[1], activation='relu' )\n","dense3 = Dense(units=n_neurons[2], activation='softmax')\n","\n","print(\"Input feature: {}\".format(x.shape))\n","x = densel(x)\n","W,B = densel.get_weights()\n","print(\"W/B :{}/{}\".format(W.shape,B.shape))\n","print(\"After densel: {}\\n\".format(x.shape))\n","\n","x = dense2(x)\n","W,B = dense2.get_weights()\n","\n","print(\"W/B: {}/{}\".format(W.shape, B.shape))\n","print(\"After dense2: {}\\n\".format(x.shape))\n","\n","x = dense3(x)\n","W,B = dense3.get_weights()\n","print(\"W/B: {}/{}\".format(W.shape, B.shape))\n","print(\"After dense3: {}\".format(x.shape))"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Input feature: (32, 245)\n","W/B :(245, 50)/(50,)\n","After densel: (32, 50)\n","\n","W/B: (50, 25)/(25,)\n","After dense2: (32, 25)\n","\n","W/B: (25, 10)/(10,)\n","After dense3: (32, 10)\n"]}]},{"cell_type":"markdown","metadata":{"id":"ry4Q2bfKFQFe"},"source":["# Shapes in the Loss Functions"]},{"cell_type":"code","metadata":{"id":"udYkmsjAFQan","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460834651,"user_tz":-540,"elapsed":290,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"0c367fec-394b-409a-fe99-85a579418f87"},"source":["from tensorflow.keras.losses import CategoricalCrossentropy\n","\n","y = tf.random.uniform(minval=0, maxval=10,\n","                      shape=(32, ),\n","                      dtype=tf.int32)\n","y = tf.one_hot(y, depth=10)\n","\n","loss_object = CategoricalCrossentropy()\n","loss = loss_object(y, x)\n","print(loss.shape)\n","print(loss)"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["()\n","tf.Tensor(2.463966, shape=(), dtype=float32)\n"]}]}]}