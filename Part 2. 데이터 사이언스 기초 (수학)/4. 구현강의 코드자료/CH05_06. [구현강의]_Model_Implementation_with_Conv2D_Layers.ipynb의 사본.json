{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CH05_06. [구현강의]_Model_Implementation_with_Conv2D_Layers.ipynb","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"mK28kLzvKx2K"},"source":["# Models with Sequential Method"]},{"cell_type":"code","metadata":{"id":"Hz7NhcEub4Np","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460645895,"user_tz":-540,"elapsed":4883,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"fdc78623-6baf-4d2b-849e-c33b2fffe6e3"},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D\n","\n","n_neurons = [10, 20, 30]\n"," \n","model = Sequential()\n","model.add(Conv2D(filters=n_neurons[0], kernel_size=3, activation='relu' ))\n","model.add(Conv2D(filters=n_neurons[1], kernel_size=3, activation='relu' ))\n","model.add(Conv2D(filters=n_neurons[2], kernel_size=3, activation='relu' ))\n","\n","x = tf.random.normal(shape=(32, 28, 298, 3))\n","predictions = model(x)\n","\n","# print(\"Input: {}\".format(x.shape))\n","# print(\"Output: {}”.format(predictions.shape))\n","\n","for layer in model.layers:\n","    W, B= layer.get_weights()\n","    print(W.shape, B.shape)\n","\n","print('====')\n","\n","trainable_variables = model.trainable_variables\n","for train_var in trainable_variables:\n","    print(train_var.shape)"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["(3, 3, 3, 10) (10,)\n","(3, 3, 10, 20) (20,)\n","(3, 3, 20, 30) (30,)\n","====\n","(3, 3, 3, 10)\n","(10,)\n","(3, 3, 10, 20)\n","(20,)\n","(3, 3, 20, 30)\n","(30,)\n"]}]},{"cell_type":"markdown","metadata":{"id":"CqG-1b1VKyKZ"},"source":["# Models with Model Sub-classing"]},{"cell_type":"code","metadata":{"id":"prbiiWr7KybR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460647071,"user_tz":-540,"elapsed":2,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"6ec6732f-70e8-4308-ee3b-3a7062a54366"},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import Conv2D\n","\n","n_neurons = [10, 20, 30]\n","\n","class TestModel (Model): \n","      def __init__ (self):\n","            super(TestModel, self).__init__ ()\n","            global n_neurons\n","\n","            self.conv_layers = []\n","            for n_neuron in n_neurons:\n","                  self.conv_layers.append(Conv2D(filters=n_neuron, kernel_size=3, activation='relu'))\n","      \n","      \n","      def call(self, x):\n","        print(\"Input \", x.shape)\n","\n","        print(\"\\n===== Conv Layers====\\n\")\n","\n","        for conv_layer in self.conv_layers:\n","          x = conv_layer(x)\n","          W, B = conv_layer.get_weights()\n","          print(\"W/B: {}/{}\".format(W.shape, B.shape))\n","          print(\"X :{}\\n\".format(x.shape))\n","        return x\n","\n","model = TestModel()\n","x = tf.random.normal(shape=(32, 28, 28, 3))\n","predictions = model(x)\n"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Input  (32, 28, 28, 3)\n","\n","===== Conv Layers====\n","\n","W/B: (3, 3, 3, 10)/(10,)\n","X :(32, 26, 26, 10)\n","\n","W/B: (3, 3, 10, 20)/(20,)\n","X :(32, 24, 24, 20)\n","\n","W/B: (3, 3, 20, 30)/(30,)\n","X :(32, 22, 22, 30)\n","\n"]}]}]}