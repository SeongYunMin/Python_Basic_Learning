{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CH04_05. [구현강의]_Toy_Datasets_for_Multiclass_Classification_.ipynb","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"MSpKRmKslpOW"},"source":["# Dataset for Multi-class Classification"]},{"cell_type":"code","metadata":{"id":"fR_rbpTmlqKR","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1658459810020,"user_tz":-540,"elapsed":4215,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"8cd523c9-406f-44fa-a827-820e61d00044"},"source":["import tensorflow as tf\n","import matplotlib.pyplot as plt\n","\n","plt.style.use('seaborn')\n","\n","N, n_feature = 8, 2\n","n_class = 3\n","\n","X = tf.zeros(shape=(0, n_feature))\n","Y = tf.zeros(shape=(0, 1), dtype=tf.int32)\n"," \n","fig, ax = plt.subplots(figsize=(5, 5))\n","for class_idx in range(n_class):\n","  center = tf.random.uniform(minval=-15, maxval=15, shape=(2, ))\n","  \n","  x1 = center[0] + tf.random.normal(shape=(N, 1))\n","  x2 = center[1] + tf.random.normal(shape=(N, 1))\n","  \n","  x = tf.concat((x1, x2), axis=1)\n","  y = class_idx*tf.ones(shape=(N, 1), dtype=tf.int32)\n","\n","  ax.scatter(x[:, 0].numpy(), x[:, 1].numpy(), alpha=0.3)\n","\n","  X = tf.concat((X, x), axis=0)\n","  Y = tf.concat((Y, y), axis=0)\n","\n","print(\"X(shape/dtype/data): {} / {}\\n{}\\n\".format(X.shape, X.dtype, X.numpy()))\n","print(\"Y(shape/dtype/data): {} / {}\\n{}\\n\".format(Y.shape, Y.dtype, Y.numpy()))"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["X(shape/dtype/data): (24, 2) / <dtype: 'float32'>\n","[[ 1.225612   -2.2934318 ]\n"," [ 0.25313145 -3.6564565 ]\n"," [-0.5052365  -3.5407724 ]\n"," [ 1.302637   -3.9248369 ]\n"," [ 0.97980887 -3.9626617 ]\n"," [ 0.5861189  -3.4988694 ]\n"," [ 1.2018688  -2.927794  ]\n"," [ 0.92314124 -2.921568  ]\n"," [ 9.698725    2.7428155 ]\n"," [11.831474    2.929526  ]\n"," [10.430215    2.218995  ]\n"," [10.766576    1.8566974 ]\n"," [11.714387    2.3587914 ]\n"," [11.093877    1.5812848 ]\n"," [10.34558     3.4693513 ]\n"," [10.032818    4.6948824 ]\n"," [11.341547    9.420766  ]\n"," [12.020254    8.28374   ]\n"," [15.724039    8.687563  ]\n"," [16.428194    9.311796  ]\n"," [12.928106    8.520602  ]\n"," [13.096002   10.701029  ]\n"," [13.449304    9.595865  ]\n"," [14.85769    10.610659  ]]\n","\n","Y(shape/dtype/data): (24, 1) / <dtype: 'int32'>\n","[[0]\n"," [0]\n"," [0]\n"," [0]\n"," [0]\n"," [0]\n"," [0]\n"," [0]\n"," [1]\n"," [1]\n"," [1]\n"," [1]\n"," [1]\n"," [1]\n"," [1]\n"," [1]\n"," [2]\n"," [2]\n"," [2]\n"," [2]\n"," [2]\n"," [2]\n"," [2]\n"," [2]]\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 360x360 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"LkNAoSV8mDxM"},"source":["#Dataset for Multi-class Classification with One-hot Encording"]},{"cell_type":"code","metadata":{"id":"3cbWNE7LmEKy","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1658459823202,"user_tz":-540,"elapsed":1307,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"a0571743-e7f8-44e7-d52a-70833309517c"},"source":["import tensorflow as tf\n","import matplotlib.pyplot as plt\n","\n","plt.style.use('seaborn')\n","\n","N, n_feature = 8, 2\n","n_class = 3\n","\n","X = tf.zeros(shape=(0, n_feature))\n","Y = tf.zeros(shape=(0, 1), dtype=tf.int32)\n"," \n","fig, ax = plt.subplots(figsize=(5, 5))\n","for class_idx in range(n_class):\n","  center = tf.random.uniform(minval=-15, maxval=15, shape=(2, ))\n","  \n","  x1 = center[0] + tf.random.normal(shape=(N, 1))\n","  x2 = center[1] + tf.random.normal(shape=(N, 1))\n","  \n","  x = tf.concat((x1, x2), axis=1)\n","  y = class_idx*tf.ones(shape=(N, 1), dtype=tf.int32)\n","\n","  ax.scatter(x[:, 0].numpy(), x[:, 1].numpy(), alpha=0.3)\n","\n","  X = tf.concat((X, x), axis=0)\n","  Y = tf.concat((Y, y), axis=0)\n","\n","Y = tf.one_hot(Y, depth=n_class, dtype=tf.int32)\n","\n","print(\"X(shape/dtype/data): {} / {}\\n{}\\n\".format(X.shape, X.dtype, X.numpy()))\n","print(\"Y(shape/dtype/data): {} / {}\\n{}\\n\".format(Y.shape, Y.dtype, Y.numpy()))"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["X(shape/dtype/data): (24, 2) / <dtype: 'float32'>\n","[[-10.260597   -5.992311 ]\n"," [-11.495207   -6.7997847]\n"," [-10.234844   -5.523302 ]\n"," [-10.950956   -2.91287  ]\n"," [-10.240096   -6.1783705]\n"," [ -8.780637   -6.0772405]\n"," [ -9.504103   -4.950549 ]\n"," [-10.507469   -5.4552917]\n"," [ 14.65643    -7.139653 ]\n"," [ 14.186284   -6.5190372]\n"," [ 15.135192   -7.942821 ]\n"," [ 16.670286   -9.020956 ]\n"," [ 15.542206   -8.266507 ]\n"," [ 15.2111     -8.762924 ]\n"," [ 14.136381   -9.130263 ]\n"," [ 13.832589   -7.653833 ]\n"," [-11.48642    10.134401 ]\n"," [-11.49044    10.62331  ]\n"," [-11.311332   10.646613 ]\n"," [-11.999601    9.157892 ]\n"," [-12.171082    9.950035 ]\n"," [-10.692248   11.307798 ]\n"," [-12.145901   10.858391 ]\n"," [-13.001259    9.057525 ]]\n","\n","Y(shape/dtype/data): (24, 1, 3) / <dtype: 'int32'>\n","[[[1 0 0]]\n","\n"," [[1 0 0]]\n","\n"," [[1 0 0]]\n","\n"," [[1 0 0]]\n","\n"," [[1 0 0]]\n","\n"," [[1 0 0]]\n","\n"," [[1 0 0]]\n","\n"," [[1 0 0]]\n","\n"," [[0 1 0]]\n","\n"," [[0 1 0]]\n","\n"," [[0 1 0]]\n","\n"," [[0 1 0]]\n","\n"," [[0 1 0]]\n","\n"," [[0 1 0]]\n","\n"," [[0 1 0]]\n","\n"," [[0 1 0]]\n","\n"," [[0 0 1]]\n","\n"," [[0 0 1]]\n","\n"," [[0 0 1]]\n","\n"," [[0 0 1]]\n","\n"," [[0 0 1]]\n","\n"," [[0 0 1]]\n","\n"," [[0 0 1]]\n","\n"," [[0 0 1]]]\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 360x360 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"zRXdsp6clqr9"},"source":["# Dataset objects"]},{"cell_type":"code","metadata":{"id":"kzRJsr8wnNgC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658459842506,"user_tz":-540,"elapsed":3,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"17011628-6def-4a83-897d-30d3cde2b0b3"},"source":["import tensorflow as tf\n","\n","N, n_feature = 100, 5\n","batch_size = 32\n","\n","t_weights = tf.constant([1, 2, 3, 4, 5], dtype=tf.float32)\n","t_bias = tf.constant([10], dtype=tf.float32)\n","\n","X = tf.random.normal(mean=0, stddev=1, shape=(N, n_feature))\n","Y = tf. reduce_sum(t_weights*X, axis=1) + t_bias\n","\n","dataset = tf.data.Dataset.from_tensor_slices((X, Y))\n","dataset = dataset.batch(batch_size).shuffle(100)\n","\n","for x, y in dataset:\n","  print(x.shape, y.shape)"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["(4, 5) (4,)\n","(32, 5) (32,)\n","(32, 5) (32,)\n","(32, 5) (32,)\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"PZVAXF3l6OLf"},"execution_count":null,"outputs":[]}]}