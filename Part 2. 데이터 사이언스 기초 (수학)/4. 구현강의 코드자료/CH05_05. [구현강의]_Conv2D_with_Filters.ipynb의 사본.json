{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CH05_05. [구현강의]_Conv2D_with_Filters.ipynb","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"gQRDSAzTG0AP"},"source":["#Shapes woth Filters"]},{"cell_type":"code","metadata":{"id":"T_qKSrPsGqCz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460585444,"user_tz":-540,"elapsed":3643,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"2297ada5-281d-4be1-9d84-f858abebc33e"},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.layers import Conv2D\n","\n","N, n_H, n_W, n_C = 32, 28, 28, 3\n","n_filter = 5\n","k_size = 3\n","\n","images = tf.random.uniform(minval=0, maxval=1,\n","                           shape=(N, n_H, n_W, n_C))\n","\n","conv = Conv2D(filters=n_filter, kernel_size=k_size)\n","\n","Y = conv(images)\n","\n","W,B = conv.get_weights()\n","\n","print(\"Input Image: {}\".format(images.shape))\n","print(\"W/B: {} / {}\".format(W.shape, B.shape))\n","print(\"Output Image: {}\".format(Y.shape))"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Input Image: (32, 28, 28, 3)\n","W/B: (3, 3, 3, 5) / (5,)\n","Output Image: (32, 26, 26, 5)\n"]}]},{"cell_type":"markdown","metadata":{"id":"P6HiSw9xGq3E"},"source":["# Computation with Filters"]},{"cell_type":"code","metadata":{"id":"VxwnRb3EGzhh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460598092,"user_tz":-540,"elapsed":472,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"323b351e-5691-4f1b-caeb-1e108476a502"},"source":["import numpy as np\n","import tensorflow as tf\n","\n","from tensorflow.keras.layers import Conv2D\n","\n","N, n_H, n_W, nc = 1, 5, 5, 3\n","n_filter = 3\n","k_size = 4\n","images = tf.random.uniform(minval=0, maxval=1,\n","                           shape=(N, n_H, n_W, n_C))\n","\n","# Forward Propagation(Tensorflow)\n","conv = Conv2D(filters=n_filter, kernel_size=k_size)\n","Y = conv(images)\n","Y = np.transpose(Y.numpy().squeeze(), (2, 0, 1 ))\n","print(\"Y(Tensorflow): \\n\", Y)\n","\n","W, B = conv.get_weights()\n","\n","# Forward Propagation(Manual)\n","images = images.numpy().squeeze()\n","\n","Y_man = np.zeros(shape=(n_H - k_size + 1, n_W - k_size + 1, n_filter))\n","\n","for c in range(n_filter):\n","  c_W = W[:, :, :, c]\n","  c_b = B[c]\n","\n","  for h in range(n_H - k_size + 1):\n","    for j in range(n_W - k_size + 1):\n","      window = images[h:h+k_size, j:j+k_size, :]\n","      conv = np.sum(window*c_W) + c_b\n","\n","      Y_man[h, j, c] = conv\n","\n","print(\"Y(Manual): \\n\", np.transpose(Y_man, (2, 0, 1)))"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Y(Tensorflow): \n"," [[[ 0.00095281 -0.0507671 ]\n","  [-0.58516806 -0.3627979 ]]\n","\n"," [[-0.08293405  0.2767651 ]\n","  [-0.04924336 -0.38355368]]\n","\n"," [[-0.5640131  -0.5483612 ]\n","  [-0.8046092  -0.6242244 ]]]\n","Y(Manual): \n"," [[[ 0.0009528  -0.05076702]\n","  [-0.58516812 -0.36279792]]\n","\n"," [[-0.08293405  0.27676505]\n","  [-0.04924333 -0.38355365]]\n","\n"," [[-0.56401312 -0.54836118]\n","  [-0.80460912 -0.62422442]]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"1L9mIrFpG05D"},"source":["# Conv Layers with Activation Functions"]},{"cell_type":"code","metadata":{"id":"yctqINpIG1M0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460617942,"user_tz":-540,"elapsed":2,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"970d7a18-752a-48b2-966b-4e4a7bf1ec7f"},"source":["import numpy as np\n","import tensorflow as tf\n","\n","from tensorflow.keras.layers import Conv2D\n","\n","\n","N, n_H, n_W, nc = 1, 5, 5, 3\n","n_filter = 3\n","k_size = 4\n","images = tf.random.uniform(minval=0, maxval=1,\n","                           shape=(N, n_H, n_W, n_C))\n","\n","# Forward Propagation(Tensorflow)\n","conv = Conv2D(filters=n_filter, kernel_size=k_size, activation='sigmoid')\n","Y = conv(images)\n","Y = np.transpose(Y.numpy().squeeze(), (2, 0, 1 ))\n","print(\"Y(Tensorflow): \\n\", Y)\n","\n","W, B = conv.get_weights()\n","\n","# Forward Propagation(Manual)\n","images = images.numpy().squeeze()\n","\n","Y_man = np.zeros(shape=(n_H - k_size + 1, n_W - k_size + 1, n_filter))\n","\n","for c in range(n_filter):\n","  c_W = W[:, :, :, c]\n","  c_b = B[c]\n","\n","  for h in range(n_H - k_size + 1):\n","    for j in range(n_W - k_size + 1):\n","      window = images[h:h+k_size, j:j+k_size, :]\n","      conv = np.sum(window*c_W) + c_b\n","      conv = 1/(1 + np.exp(-conv))\n","\n","      Y_man[h, j, c] = conv\n","\n","print(\"Y(Manual): \\n\", np.transpose(Y_man, (2, 0, 1)))"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Y(Tensorflow): \n"," [[[0.5007789  0.60691375]\n","  [0.5165082  0.58255744]]\n","\n"," [[0.7677109  0.72714293]\n","  [0.6149668  0.7077785 ]]\n","\n"," [[0.48629794 0.40676188]\n","  [0.28857785 0.38777444]]]\n","Y(Manual): \n"," [[[0.50077892 0.60691373]\n","  [0.51650816 0.58255747]]\n","\n"," [[0.76771093 0.72714294]\n","  [0.61496679 0.70777853]]\n","\n"," [[0.48629795 0.40676186]\n","  [0.28857784 0.38777445]]]\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"W_bchZYj9Kwn"},"execution_count":null,"outputs":[]}]}