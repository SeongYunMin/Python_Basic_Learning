{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CH02_06. [구현강의]_Cascaded_Dense_Layers.ipynb","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"XSf1SAVDPMA9"},"source":["#Shapes of cacaded Dense Layers"]},{"cell_type":"code","metadata":{"id":"K2WcZ9YzPLGN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658459406299,"user_tz":-540,"elapsed":6535,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"818ef785-9ef0-467e-ba02-fe901fd25aee"},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.layers import Dense\n","\n","N, n_feature = 4,10\n","X = tf.random.normal(shape=(N, n_feature))\n","\n","n_neurons = [3, 5]\n","dense1 = Dense(units=n_neurons[0], activation='sigmoid')\n","dense2 = Dense(units=n_neurons[1], activation='sigmoid')\n","\n","# forward propagation\n","A1 = dense1(X)\n","Y = dense2(A1)\n","\n","# get weight/bias\n","W1, B1 = dense1.get_weights()\n","W2, B2 = dense1.get_weights()\n","\n","print(\"X: {}\\n\".format(X.shape))\n","\n","print(\"W1: \", W1.shape)\n","print(\"B1: \", B1.shape)\n","print(\"A1: ()\\n\".format(A1.shape))\n","\n","print(\"W2: \", W2.shape)\n","print(\"B2: \", B2.shape)\n","print(\"Y: {}\".format(Y.shape))"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["X: (4, 10)\n","\n","W1:  (10, 3)\n","B1:  (3,)\n","A1: ()\n","\n","W2:  (10, 3)\n","B2:  (3,)\n","Y: (4, 5)\n"]}]},{"cell_type":"markdown","metadata":{"id":"_SdniaFbPMit"},"source":["#Dense Layers with Python List"]},{"cell_type":"code","metadata":{"id":"MtgonEc2PM2V","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658459426499,"user_tz":-540,"elapsed":3,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"e26d4273-b57f-4b66-e316-08553e4d059c"},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.layers import Dense\n","\n","N, n_feature = 4, 10\n","\n","X = tf.random.normal(shape=(N, n_feature))\n","\n","m_neurons = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n","\n","dense_layers = list()\n","\n","for n_neuron in n_neurons:\n","  dense = Dense(units=n_neuron, activation='relu')\n","  dense_layers.append(dense)\n","print(\"Input: ”\", X.shape)\n","\n","for dense_idx, dense in enumerate(dense_layers):\n","  X = dense(X)\n","  print(\"After dense layer\", dense_idx + 1)\n","  print(X.shape, '\\n')\n","\n","Y = X  "],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Input: ” (4, 10)\n","After dense layer 1\n","(4, 3) \n","\n","After dense layer 2\n","(4, 5) \n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"cs5sSmgtPNPK"},"source":["#Output Calculations"]},{"cell_type":"code","metadata":{"id":"KAOfLmqKQDtM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658459451660,"user_tz":-540,"elapsed":281,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"d3a39793-0254-4c44-d74b-c1242215fd97"},"source":["import tensorflow as tf\n","\n","from tensorflow.math import exp\n","from tensorflow.linalg import matmul\n","\n","from tensorflow.keras.layers import Dense\n","\n","N, n_feature = 4, 5\n","X = tf.random.normal(shape=(N, n_feature))\n","X_cp = tf.identity(X)\n","\n","n_neurons = [3, 4, 5]\n","\n","dense_layers = list()\n","for n_neuron in n_neurons:  \n","  dense = Dense(units=n_neuron, activation='sigmoid' )\n","  dense_layers.append(dense)\n","print(X_cp.shape)\n","\n","# forward propagation(Tensorflow)\n","W, B = list(), list()\n","for dense_idx, dense in enumerate(dense_layers):\n","  x = dense(X)\n","  w, b = dense.get_weights()\n","  W.append(w)\n","  B.append(b)\n","  print(\"Y(Tensorflow): \\n\", X.numpy())\n","\n","\n","# forward propagation(Manual)\n","for layer_idx in range(len(n_neurons)):\n","  w, b = W[layer_idx], B[layer_idx]\n","  \n","  X_cp_ = matmul(X_cp, w) + b\n","  X_cp_ = 1/(1 + exp(-X_cp_))\n","  print(\"Y(Manual): \\n\", X_cp.numpy())"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["(4, 5)\n","Y(Tensorflow): \n"," [[ 0.06675826  0.48867878  0.3436861   1.2327288  -0.92616004]\n"," [-0.78806245  0.05966637 -0.37663674  0.50513923 -1.5538013 ]\n"," [-2.0325694  -0.32740903  0.26999393  0.15857382  1.9611359 ]\n"," [-1.2176428  -1.0491334   1.6158277  -0.09503141  1.9127471 ]]\n","Y(Tensorflow): \n"," [[ 0.06675826  0.48867878  0.3436861   1.2327288  -0.92616004]\n"," [-0.78806245  0.05966637 -0.37663674  0.50513923 -1.5538013 ]\n"," [-2.0325694  -0.32740903  0.26999393  0.15857382  1.9611359 ]\n"," [-1.2176428  -1.0491334   1.6158277  -0.09503141  1.9127471 ]]\n","Y(Tensorflow): \n"," [[ 0.06675826  0.48867878  0.3436861   1.2327288  -0.92616004]\n"," [-0.78806245  0.05966637 -0.37663674  0.50513923 -1.5538013 ]\n"," [-2.0325694  -0.32740903  0.26999393  0.15857382  1.9611359 ]\n"," [-1.2176428  -1.0491334   1.6158277  -0.09503141  1.9127471 ]]\n","Y(Manual): \n"," [[ 0.06675826  0.48867878  0.3436861   1.2327288  -0.92616004]\n"," [-0.78806245  0.05966637 -0.37663674  0.50513923 -1.5538013 ]\n"," [-2.0325694  -0.32740903  0.26999393  0.15857382  1.9611359 ]\n"," [-1.2176428  -1.0491334   1.6158277  -0.09503141  1.9127471 ]]\n","Y(Manual): \n"," [[ 0.06675826  0.48867878  0.3436861   1.2327288  -0.92616004]\n"," [-0.78806245  0.05966637 -0.37663674  0.50513923 -1.5538013 ]\n"," [-2.0325694  -0.32740903  0.26999393  0.15857382  1.9611359 ]\n"," [-1.2176428  -1.0491334   1.6158277  -0.09503141  1.9127471 ]]\n","Y(Manual): \n"," [[ 0.06675826  0.48867878  0.3436861   1.2327288  -0.92616004]\n"," [-0.78806245  0.05966637 -0.37663674  0.50513923 -1.5538013 ]\n"," [-2.0325694  -0.32740903  0.26999393  0.15857382  1.9611359 ]\n"," [-1.2176428  -1.0491334   1.6158277  -0.09503141  1.9127471 ]]\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"L4vGNkqeFLUg"},"execution_count":null,"outputs":[]}]}