{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CH04_06. [구현강의]_MSE_and_BCE.ipynb","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"bYDEpa_vooMW"},"source":["# MSE Calculation"]},{"cell_type":"code","metadata":{"id":"ToSDJPG7onYt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658459864858,"user_tz":-540,"elapsed":3689,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"178c57a7-543c-4d6d-8008-4e0bc2159e27"},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.losses import MeanSquaredError\n","\n","loss_object = MeanSquaredError()\n","\n","batch_size = 32\n","predictions = tf.random.normal(shape=(batch_size, 1))\n","labels = tf.random.normal(shape=(batch_size, 1))\n","\n","mse = loss_object(labels, predictions)\n","mse_manual = tf.reduce_mean(tf.math.pow(labels - predictions, 2))\n","\n","print(\"MSE(Tensorflow): \", mse.numpy())\n","print(\"MSE(Manual): \", mse_manual.numpy())"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["MSE(Tensorflow):  3.1097684\n","MSE(Manual):  3.1097686\n"]}]},{"cell_type":"markdown","metadata":{"id":"WerdKcJ4oonS"},"source":["#MSE with Model/Dataset"]},{"cell_type":"code","metadata":{"id":"c1fzhLoLoo6X","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658459864859,"user_tz":-540,"elapsed":8,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"6a1aa92d-5d79-4fc2-dd9c-54f2e61a52da"},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.losses import MeanSquaredError\n","\n","N, n_feature = 100, 5\n","batch_size = 32\n","\n","X = tf.random.normal(shape=(N, n_feature))\n","Y = tf.random.normal(shape=(N, 1))\n","\n","dataset = tf.data.Dataset.from_tensor_slices((X, Y))\n","dataset = dataset.batch(batch_size)\n","\n","model = Dense(units=1, activation='linear')\n","loss_object = MeanSquaredError()\n","\n","for x, y in dataset:\n","  predictions = model(x)\n","  loss = loss_object(y, predictions)\n","  print(loss.numpy())"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["1.8376609\n","1.7198751\n","0.82532215\n","2.0306885\n"]}]},{"cell_type":"markdown","metadata":{"id":"0xXcFogBopTL"},"source":["# Binary Calculation"]},{"cell_type":"code","metadata":{"id":"2lSPhtGcopk4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658459876653,"user_tz":-540,"elapsed":510,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"4988071e-9a48-452e-9513-008003d331ac"},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.losses import BinaryCrossentropy\n","\n","batch_size = 32\n","n_class = 2\n","\n","predictions = tf.random.uniform(shape=(batch_size,1),\n","                                minval=0, maxval=1,\n","                                dtype=tf.float32)\n","labels = tf.random.uniform(shape=(batch_size, 1),\n","                            minval=0, maxval=n_class,\n","                            dtype=tf.int32)\n","\n","loss_object = BinaryCrossentropy()\n","\n","loss = loss_object(labels, predictions)\n","\n","\n","labels = tf.cast(labels, tf.float32)\n","\n","bce_man = -(labels*tf.math.log(predictions) + (1 - labels)*tf.math.log(1 - predictions))\n","bce_man = tf.reduce_mean(bce_man)\n","\n","print(\"BCE(Tenaorflow): \", loss.numpy())\n","print(\"BCE(Manual): \", bce_man.numpy())"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["BCE(Tenaorflow):  1.215735\n","BCE(Manual):  1.2157356\n"]}]},{"cell_type":"markdown","metadata":{"id":"E-8af-PAo2J-"},"source":["#BSE with Model/Dataset"]},{"cell_type":"code","metadata":{"id":"4Vvbzs8uo2re","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658459885684,"user_tz":-540,"elapsed":294,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"aca0ad6b-104a-466e-d7e4-42cb3dde233d"},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.losses import BinaryCrossentropy\n","\n","N, n_feature = 100, 5\n","t_weights = tf.constant([1, 2, 3, 4, 5], dtype=tf.float32)\n","t_bias = tf.constant([10], dtype = tf.float32)\n","\n","X = tf.random.normal(mean=0, stddev=1, shape=(N, n_feature))\n","Y = tf.reduce_sum(t_weights*X, axis=1) + t_bias\n","Y = tf.cast(Y > 5, tf.int32)\n","\n","dataset = tf.data.Dataset.from_tensor_slices((X, Y))\n","dataset = dataset.batch(batch_size)\n","\n","model = Dense(units=1, activation='sigmoid' )\n","loss_object = BinaryCrossentropy()\n","\n","for x, y in dataset:\n","  predictions = model(x)\n","  loss = loss_object(y, predictions)\n","  print(loss.numpy())"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["1.054119\n","1.2696888\n","1.0150422\n","0.84433913\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"GKNtG-3B6Yyp"},"execution_count":null,"outputs":[]}]}