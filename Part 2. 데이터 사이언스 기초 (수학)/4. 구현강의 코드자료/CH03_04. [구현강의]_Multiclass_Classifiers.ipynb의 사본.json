{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CH03_04. [구현강의]_Multiclass_Classifiers.ipynb","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"n_58fsIkdkDi"},"source":["#IO of Softmax"]},{"cell_type":"code","metadata":{"id":"pk-k4I5nddHG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658459684339,"user_tz":-540,"elapsed":4142,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"96e9c190-c344-429d-d891-cf6131147e4d"},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.layers import Activation\n","\n","logit = tf.random.uniform(shape=(8, 5), minval=-10, maxval=10)\n","\n","softmax_value = Activation('softmax')(logit)\n","softmax_sum = tf.reduce_sum(softmax_value, axis=1)\n","\n","print(\"Logits: \\n\", logit.numpy())\n","print(\"Probabilities: \\n\", softmax_value.numpy() )\n","print(\"Sum of softmax values: \\n\", softmax_sum)"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Logits: \n"," [[ 4.7657824  -9.689002   -4.2778516   9.89052     6.162098  ]\n"," [ 5.226591    2.2963638   9.721352    5.2320023   1.7917824 ]\n"," [ 2.642004    8.607473   -3.3787346   4.8883514  -1.6320324 ]\n"," [-4.9865317   5.647213    1.151598    3.4848547  -2.7806687 ]\n"," [ 4.254718   -0.9138031  -9.911993    5.28146    -9.6244545 ]\n"," [ 0.48083305  9.0256405   0.91053486 -3.488381    8.276966  ]\n"," [ 2.7108622   4.6370173   3.28547    -7.641368    3.5086918 ]\n"," [ 4.4552374   7.1224995  -0.52304745 -1.4130545   6.8461514 ]]\n","Probabilities: \n"," [[5.7746582e-03 3.0471483e-09 6.8222272e-07 9.7089350e-01 2.3331273e-02]\n"," [1.0912532e-02 5.8256445e-04 9.7718143e-01 1.0971741e-02 3.5172811e-04]\n"," [2.4987168e-03 9.7383964e-01 6.0665739e-06 2.3620730e-02 3.4795783e-05]\n"," [2.1385018e-05 8.8774145e-01 9.9052563e-03 1.0213774e-01 1.9413517e-04]\n"," [2.6332077e-01 1.4990806e-03 1.8533643e-07 7.3517966e-01 2.4707975e-07]\n"," [1.3203529e-04 6.7866069e-01 2.0291172e-04 2.4939195e-06 3.2100186e-01]\n"," [8.4315225e-02 5.7866144e-01 1.4978041e-01 2.6914706e-06 1.8724017e-01]\n"," [3.7974194e-02 5.4684693e-01 2.6148511e-04 1.0737961e-04 4.1481009e-01]]\n","Sum of softmax values: \n"," tf.Tensor(\n","[1.0000001  1.         1.         1.         0.99999994 1.\n"," 0.99999994 1.0000001 ], shape=(8,), dtype=float32)\n"]}]},{"cell_type":"markdown","metadata":{"id":"_4hAPBhMdkwL"},"source":["#Softmax in Dense Layers"]},{"cell_type":"code","metadata":{"id":"2xCDD-L6dk-A","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658459689944,"user_tz":-540,"elapsed":514,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"b4ff5edd-0b2b-41a0-aa84-64ed4c179f0f"},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.layers import Dense\n","\n","logit = tf.random.uniform(shape=(8,5), minval=-10, maxval=10)\n","dense = Dense(units=8, activation='softmax')\n","\n","Y = dense(logit)\n","print(tf.reduce_sum(Y, axis=1))"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor(\n","[1.         0.99999994 0.99999994 1.0000001  0.99999994 1.\n"," 0.99999994 0.99999994], shape=(8,), dtype=float32)\n"]}]},{"cell_type":"markdown","metadata":{"id":"2Fk9jz_3dlN8"},"source":["#Multi -class classifiers"]},{"cell_type":"code","metadata":{"id":"SoIXrxlmdleY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658459717199,"user_tz":-540,"elapsed":3,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"07a248e3-7b34-41f2-c2fc-68d5bbfbd420"},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.models import Model\n","\n","from tensorflow.keras.layers import Dense\n","\n","\n","class TestModel(Model):\n","  def __init__(self):\n","    super(TestModel, self).__init__()\n","\n","    self.dense1 = Dense(units=8, activation='relu')\n","    self.dense2 = Dense(units=5, activation='relu' )\n","    self.dense3 = Dense(units=3, activation='softmax')\n","    \n","  def call(self, x):\n","    print(\"X: {}\\n{}\\n\".format(x.shape, x.numpy()))\n","    \n","    x = self.dense1(x)\n","    print(\"A1: {}\\n{}\\n\".format(x.shape, x.numpy()))\n","    \n","    x = self.dense2(x)\n","    print(\"A2: ()\\n{}\\n\".format(x.shape, x.numpy()))\n","    \n","    \n","    x = self.dense3(x)\n","    print(\"Y: {}\\n{}\\n\".format(x.shape, x.numpy()))\n","    print(\"Sum of vectors: {}\\n\".format(tf.reduce_sum(x, axis=1)))\n","    return x\n","\n","\n","model = TestModel()\n","\n","X = tf.random.uniform(shape=(8, 5), minval=-10, maxval=10)\n","Y = model(X)"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["X: (8, 5)\n","[[ 4.6298714   7.099886    7.866665    2.2459106  -9.540601  ]\n"," [ 3.0190067   7.3741436  -3.6680245  -8.426245   -4.2783785 ]\n"," [-1.9001102   8.909948    1.8699741  -8.042295    0.2842636 ]\n"," [-2.1587133  -5.9095263   2.1758728   8.027676   -7.4996114 ]\n"," [-7.528045    9.221018    6.2410927  -0.15737534 -5.3605175 ]\n"," [-9.412994   -3.195455   -9.057851   -2.9973745  -0.6690521 ]\n"," [ 9.968353   -0.5241661  -0.22159767 -1.4988804   3.6894464 ]\n"," [-4.65719     8.027973   -2.3250651   4.780793   -1.0824089 ]]\n","\n","A1: (8, 8)\n","[[ 2.3726823   7.881641    5.3759904   0.          0.          0.\n","   3.0115318   0.        ]\n"," [ 0.0396802   2.4736478   0.13301618  0.          0.         10.025664\n","   2.1761546   1.4080051 ]\n"," [ 0.          0.22436315  0.          0.          0.         10.677375\n","   3.3620315   4.145239  ]\n"," [ 4.449751    3.1151102   3.4108102   3.4254735   0.34312382  0.\n","   0.          0.        ]\n"," [ 0.          5.1625457   0.          0.          0.          6.5666003\n","   4.594462    0.        ]\n"," [ 0.9597804   0.          0.          5.018123    4.9018455   4.9604907\n","   0.          0.        ]\n"," [ 0.          0.          2.7225134   0.          0.          0.\n","   0.          6.586276  ]\n"," [ 4.954592    7.0331273   2.6022418   0.          4.540901    4.632692\n","   6.350744    0.        ]]\n","\n","A2: ()\n","(8, 5)\n","\n","Y: (8, 3)\n","[[0.21271084 0.03072809 0.75656104]\n"," [0.29602867 0.32998776 0.37398353]\n"," [0.28240526 0.33017603 0.38741878]\n"," [0.24160402 0.1632961  0.59509987]\n"," [0.6132953  0.20392238 0.18278229]\n"," [0.08986339 0.14934675 0.76078993]\n"," [0.03456214 0.05333887 0.91209894]\n"," [0.26029542 0.0602708  0.67943376]]\n","\n","Sum of vectors: [1.         1.         1.         1.         1.         1.0000001\n"," 0.99999994 1.        ]\n","\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"cQmATbx55vmM"},"execution_count":null,"outputs":[]}]}