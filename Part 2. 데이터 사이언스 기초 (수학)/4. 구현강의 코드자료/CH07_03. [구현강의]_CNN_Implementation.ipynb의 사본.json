{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CH07_03. [구현강의]_CNN_Implementation.ipynb","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"i3LpwLQiJj4u"},"source":["# Implementation with Sequential Method"]},{"cell_type":"code","metadata":{"id":"XNHITwGib1S3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460870272,"user_tz":-540,"elapsed":3816,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"e43cab77-6c30-4e42-e786-82dfe656de65"},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D\n","from tensorflow.keras.layers import MaxPooling2D\n","from tensorflow.keras.layers import Flatten\n","from tensorflow.keras.layers import Dense\n","\n","\n","N, n_H, n_W, n_C = 4, 28, 28, 3\n","n_conv_neurons = [10, 20, 30]\n","n_dense_neurons = [50, 30, 10]\n","k_size, padding = 3, 'same'\n","pool_size, pool_strides = 2, 2\n","\n","x = tf.random.normal(shape=(N, n_H, n_W, n_C))\n","print(x.shape)\n","\n","model = Sequential()\n","model.add(Conv2D(filters=n_conv_neurons[0], kernel_size=k_size, padding=padding,\n","                activation='relu'))\n","model.add(MaxPooling2D(pool_size=pool_size, strides=pool_strides))\n","\n","model.add(Conv2D(filters=n_conv_neurons[1], kernel_size=k_size, padding=padding,\n","                activation='relu'))\n","model .add(MaxPooling2D(pool_size=pool_size, strides=pool_strides))\n","\n","model.add(Conv2D(filters=n_conv_neurons[2], kernel_size=k_size, padding=padding,\n","                activation='relu'))\n","model .add(MaxPooling2D(pool_size=pool_size, strides=pool_strides))\n","\n","model.add(Flatten())\n","\n","model.add(Dense(units=n_dense_neurons[0], activation='relu'))\n","model.add(Dense(units=n_dense_neurons[1], activation='relu'))\n","model.add(Dense(units=n_dense_neurons[2], activation='relu'))\n","\n","predictions = model(x)\n","print(predictions.shape)"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["(4, 28, 28, 3)\n","(4, 10)\n"]}]},{"cell_type":"markdown","metadata":{"id":"WnK-wJhLJkqf"},"source":["# Implementation with Model Sub-classing"]},{"cell_type":"code","metadata":{"id":"VCjCFJUvJk8P","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460891726,"user_tz":-540,"elapsed":435,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"be59882c-a7e0-424a-d400-bc7fa2e04420"},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import Layer\n","\n","\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D\n","from tensorflow.keras.layers import MaxPooling2D\n","from tensorflow.keras.layers import Flatten\n","from tensorflow.keras.layers import Dense\n","\n","\n","class TestCNN(Model):\n","  def __init__(self):\n","    super(TestCNN, self).__init__()\n","\n","    self.conv1 = Conv2D(filters=n_conv_neurons[0], kernel_size=k_size, padding=padding,\n","                        activation='relu')\n","    self.conv1_pool = MaxPooling2D(pool_size=pool_size, strides=pool_strides)\n","    self.conv2 = Conv2D(filters=n_conv_neurons[1], kernel_size=k_size, padding=padding,\n","                        activation='relu')\n","    self.conv2_pool = MaxPooling2D(pool_size=pool_size,strides=pool_strides)\n","    self.conv3 = Conv2D(filters=n_conv_neurons[2], kernel_size=k_size, padding=padding,\n","                        activation='relu')\n","    self.conv3_pool = MaxPooling2D(pool_size=pool_size, strides=pool_strides)\n","    self.flatten = Flatten()\n","\n","    self.dense1 = Dense(units=n_dense_neurons[0], activation='relu')\n","    self.dense2 = Dense(units=n_dense_neurons[1], activation='relu')\n","    self.dense3 = Dense(units=n_dense_neurons[2], activation='softmax')\n","\n","  def call(self, x):\n","    x =self.conv1(x)\n","    print(x.shape)\n","    x =self.conv1_pool(x)\n","    print(x.shape)\n","\n","    x = self.conv2(x)\n","    print(x.shape)\n","    x = self.conv2_pool(x)\n","    print(x.shape)\n","\n","    x = self.conv3(x)\n","    print(x.shape)\n","    x = self.conv3_pool(x)\n","    print(x.shape)\n","      \n","    x = self.flatten(x)\n","    print(x.shape)\n","\n","    x = self.dense1(x)\n","    print(x.shape)\n","    x = self.dense2(x)\n","    print(x.shape)\n","    x = self.dense3(x)\n","    print(x.shape)\n","    return x\n","\n","N, n_H, n_W, n_C = 4, 28, 28, 3\n","n_conv_neurons = [10, 20, 30]\n","n_dense_neurons = [50, 30, 10]\n","k_size, padding = 3, 'same'\n","pool_size, pool_strides = 2, 2\n","\n","x = tf.random.normal(shape=(N, n_H, n_W, n_C))\n","\n","model = TestCNN()\n","y = model(x)"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["(4, 28, 28, 10)\n","(4, 14, 14, 10)\n","(4, 14, 14, 20)\n","(4, 7, 7, 20)\n","(4, 7, 7, 30)\n","(4, 3, 3, 30)\n","(4, 270)\n","(4, 50)\n","(4, 30)\n","(4, 10)\n"]}]},{"cell_type":"markdown","metadata":{"id":"zq4WdVoPJlV-"},"source":["# Implementation with Sequential + Layer sub-classing"]},{"cell_type":"code","metadata":{"id":"y_jQUCJrJlnu","executionInfo":{"status":"ok","timestamp":1658460902592,"user_tz":-540,"elapsed":276,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}}},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.models import Model\n","\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Layer\n","\n","from tensorflow.keras.layers import Conv2D\n","from tensorflow.keras.layers import MaxPooling2D\n","from tensorflow.keras.layers import Flatten\n","from tensorflow.keras.layers import Dense\n","\n","\n","class MyConv(Layer):\n","  def __init__(self, n_neuron):\n","    super(MyConv, self).__init__()\n","    self.conv = Conv2D(filters=n_neuron, kernel_size=k_size, padding=padding,\n","                        activation = 'relu')\n","    self.conv_pool = MaxPooling2D(pool_size=pool_size, strides=pool_strides)\n","  \n","  def call(self, x):\n","    x = self.conv(x)\n","    x = self.conv_pool(x)\n","    return x\n","\n","\n","model = Sequential()\n","model.add(Conv2D(filters=n_conv_neurons[0], kernel_size=k_size, padding=padding,\n","                 activation='relu'))\n","model.add(MaxPooling2D(pool_size=pool_size, strides=pool_strides))\n","model.add(Conv2D(filters=n_conv_neurons[1], kernel_size=k_size, padding=padding,\n","                 activation='relu'))\n","model.add(MaxPooling2D(pool_size=pool_size, strides=pool_strides))\n","model.add(Conv2D(filters=n_conv_neurons[2], kernel_size=k_size, padding=padding,\n","                  activation='relu'))\n","model.add(MaxPooling2D(pool_size=pool_size, strides=pool_strides))\n","model.add(Flatten())\n","model.add(Dense(units=n_dense_neurons[0], activation='relu') )\n","model.add(Dense(units=n_dense_neurons[1], activation='relu') )\n","model.add(Dense(units=n_dense_neurons[2], activation='softmax') )\n","\n","model = Sequential()\n","model.add(MyConv(n_conv_neurons[0]))\n","model.add(MyConv(n_conv_neurons[1]))\n","model.add(MyConv(n_conv_neurons[2]))\n","model.add(Flatten())\n","\n","model.add((Dense(units=n_dense_neurons[0], activation='relu')))\n","model.add((Dense(units=n_dense_neurons[1], activation='relu')))\n","model.add((Dense(units=n_dense_neurons[2], activation='softmax')))"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vhL_-DblJl5N"},"source":["# Implementation with with Model and Layer Sub-classing"]},{"cell_type":"code","metadata":{"id":"reNuU4fRJm8W","executionInfo":{"status":"ok","timestamp":1658460965904,"user_tz":-540,"elapsed":275,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}}},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import Layer\n","\n","from tensorflow.keras.layers import Conv2D\n","from tensorflow.keras.layers import MaxPooling2D\n","from tensorflow.keras.layers import Flatten\n","from tensorflow.keras.layers import Dense\n","\n","\n","class MyConv(Layer):\n","  def __init_ (self, n_neuron):\n","    super(MyConv, self). init_ ()\n","    self.conv = Conv2D(filters=n_neuron, kernel_size=k_size, padding=padding,\n","                        activation ='relu')\n","    self.conv_pool = MaxPooling2D(pool_size=pool_size, strides=pool_strides)\n"," \n","  def call(self, x):\n","    x = self.conv(x)\n","    x = self.cong_pool (x)\n","    return x\n","\n","\n","class TestCNN(Model):\n","  def __init__(self):\n","    super(TestCNN, self).__init__()\n","    self.fe = Sequential()\n","\n","    self.fe.add(MyConv(n_conv_neurons[0]))\n","    self.fe.add(MyConv(n_conv_neurons[1]))\n","    self.fe.add(MyConv(n_conv_neurons[2]))\n","    self.fe.add(Flatten())\n","\n","    self.classifier = Sequential()\n","    self.classifier.add(Dense(units=n_dense_neurons[0], activation='relu'))\n","    self.classifier.add(Dense(units=n_dense_neurons[1], activation='relu'))\n","    self.classifier.add(Dense(units=n_dense_neurons[2], activation='relu'))\n","\n","  def call(self, x):\n","      x =self.conv1(x)\n","      x =self.conv2(x)\n","      x =self.conv3(x)\n","      x = self.fe(x)\n","      \n","      x = self.dense1(x)\n","      x = self.dense2(x)\n","      x = self.dense3(x)\n","      x = self.classifier(x)\n","      return x    "],"execution_count":6,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"2yfyYGAC0sQE"},"execution_count":null,"outputs":[]}]}