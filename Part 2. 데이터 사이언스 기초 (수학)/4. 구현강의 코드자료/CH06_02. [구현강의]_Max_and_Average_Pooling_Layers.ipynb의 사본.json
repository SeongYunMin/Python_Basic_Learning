{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CH06_02. [구현강의]_Max_and_Average_Pooling_Layers.ipynb","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"azS591Vf9aPO"},"source":["# Max Pooling"]},{"cell_type":"code","metadata":{"id":"XcKV93MLb2UA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460682573,"user_tz":-540,"elapsed":3632,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"e76dd9d1-7026-4e97-eb7c-9c044c4e7b4f"},"source":["import numpy as np\n","import tensorflow as tf\n","\n","from tensorflow.keras.layers import MaxPooling1D\n","\n","L, f, a = 10, 2, 1\n","\n","x = tf.random.normal(shape=(1, L, 1))\n","\n","pool_max = MaxPooling1D(pool_size=f, strides=a)\n","pooled_max = pool_max(x)\n","\n","print(\"x: {}\\n{}\".format(x.shape, x.numpy().flatten()))\n","print(\"pooled_max(Tensorflow): {}\\n{}\".format(pooled_max.shape,\n","                                              pooled_max.numpy().flatten()))\n","\n","x = x.numpy().flatten()\n","pooled_max_man = np.zeros((L - f + 1, ))\n","for i in range(L - f + 1):\n","  window = x[i : i+f]\n","  pooled_max_man[i] = np.max(window)\n","\n","print(\"pooled max(Manual): {}\\n{}\".format(pooled_max_man.shape,\n","                                          pooled_max_man))"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["x: (1, 10, 1)\n","[ 0.9067533   0.33478656  0.59044105 -2.2746887   0.90575975  0.5832055\n","  0.6863199  -0.85877347  0.4177464   0.7346515 ]\n","pooled_max(Tensorflow): (1, 9, 1)\n","[0.9067533  0.59044105 0.59044105 0.90575975 0.90575975 0.6863199\n"," 0.6863199  0.4177464  0.7346515 ]\n","pooled max(Manual): (9,)\n","[0.9067533  0.59044105 0.59044105 0.90575975 0.90575975 0.68631989\n"," 0.68631989 0.41774639 0.73465151]\n"]}]},{"cell_type":"markdown","metadata":{"id":"DYTb1JxL9amH"},"source":["# Average Pooling"]},{"cell_type":"code","metadata":{"id":"LkXGYZHC9a0g","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460690412,"user_tz":-540,"elapsed":580,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"c9611aaf-9b0b-41f1-e971-307c607b7635"},"source":["import numpy as np\n","import tensorflow as tf\n","\n","from tensorflow.keras.layers import MaxPooling1D\n","\n","L, f, a = 10, 2, 1\n","\n","x = tf.random.normal(shape=(1, L, 1))\n","\n","pool_max = MaxPooling1D(pool_size=f, strides=a)\n","pooled_max = pool_max(x)\n","\n","print(\"x: {}\\n{}\".format(x.shape, x.numpy().flatten()))\n","print(\"pooled_avg(Tensorflow): {}\\n{}\".format(pooled_max.shape,\n","                                              pooled_max.numpy().flatten()))\n"," \n","x = x.numpy().flatten()\n","pooled_avg_man = np.zeros((L - f + 1, ))\n","for i in range(L - f + 1):\n","  window = x[i : i+f]\n","  pooled_avg_man[i] = np.max(window)\n","\n","print(\"pooled max(Manual): {}\\n{}\".format(pooled_avg_man.shape,\n","                                          pooled_avg_man))"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["x: (1, 10, 1)\n","[ 1.3766624   0.28311196  0.5732255  -1.9678562  -0.5554108   0.2611144\n","  0.09826555 -3.1961877  -1.7752246  -0.29801932]\n","pooled_avg(Tensorflow): (1, 9, 1)\n","[ 1.3766624   0.5732255   0.5732255  -0.5554108   0.2611144   0.2611144\n","  0.09826555 -1.7752246  -0.29801932]\n","pooled max(Manual): (9,)\n","[ 1.37666237  0.5732255   0.5732255  -0.5554108   0.26111439  0.26111439\n","  0.09826555 -1.77522457 -0.29801932]\n"]}]},{"cell_type":"markdown","metadata":{"id":"E27WphK39bHF"},"source":["# 2D Max/Avg Pooling"]},{"cell_type":"code","metadata":{"id":"MgIXlh1K9bU5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460701861,"user_tz":-540,"elapsed":420,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"58f88d18-e655-4b4a-c872-0ea74fa5718e"},"source":["import numpy as np\n","import tensorflow as tf\n","\n","from tensorflow.keras.layers import MaxPooling2D\n","\n","N, n_H, n_W, n_C =1, 5, 5, 1\n","f,s = 2,1\n","\n","x = tf.random.normal(shape=(N, n_H, n_W, n_C))\n","\n","pool_max = MaxPooling2D(pool_size=f, strides=s)\n","pooled_max = pool_max(x)\n","\n","print(\"x: {}\\n{}\".format(x.shape, x.numpy().squeeze()))\n","print(\"pooled max(Tensorflow): {}\\n{}\".format(pooled_max.shape,\n","                                              pooled_max.numpy().squeeze()))\n","x = x.numpy().squeeze()\n","pooled_max_man = np.zeros(shape=(n_H - f + 1, n_W - f + 1))\n","for i in range(n_H - f + 1):\n","    for j in range(n_W - f + 1):\n","        window = x[i : i+f, j : j+f]\n","        pooled_max_man[i, 3] = np.max(window)\n","\n","print(\"pooled max(Manual): {}\\n{}\".format(pooled_max_man.shape,\n","                                          pooled_max_man))"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["x: (1, 5, 5, 1)\n","[[-0.2440361   0.3444034  -0.11930796 -0.42612177  0.45805454]\n"," [ 2.2307262   0.67945075 -0.14207959  0.8270629  -1.4097173 ]\n"," [ 0.3958117  -0.5220614   0.1948241  -1.1016636  -0.7450882 ]\n"," [-0.43875018  0.48215756  1.0272092  -0.39096746  0.03751491]\n"," [ 0.47313464 -1.5143055   0.09350269 -1.1673537   3.5889976 ]]\n","pooled max(Tensorflow): (1, 4, 4, 1)\n","[[2.2307262  0.67945075 0.8270629  0.8270629 ]\n"," [2.2307262  0.67945075 0.8270629  0.8270629 ]\n"," [0.48215756 1.0272092  1.0272092  0.03751491]\n"," [0.48215756 1.0272092  1.0272092  3.5889976 ]]\n","pooled max(Manual): (4, 4)\n","[[0.         0.         0.         0.8270629 ]\n"," [0.         0.         0.         0.8270629 ]\n"," [0.         0.         0.         0.03751491]\n"," [0.         0.         0.         3.5889976 ]]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import tensorflow as tf\n","\n","from tensorflow.keras.layers import MaxPooling2D\n","\n","N, n_H, n_W, n_C = 1, 5, 5, 1\n","f, s = 2, 1\n","\n","x = tf.random.normal(shape=(N, n_H, n_W, n_C))\n","pool_max = MaxPooling2D(pool_size=f, strides=s)\n","pooled_max = pool_max(x)\n","\n","print(\"x: {}\\n{}\".format(x.shape, x.numpy().squeeze()))\n","print(\"pooled_max(Tensorflow): {}\\n{}\".format(pooled_max.shape,\n","                                              pooled_max.numpy().squeeze()))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UGbdaoSzXZzg","executionInfo":{"status":"ok","timestamp":1658460709889,"user_tz":-540,"elapsed":624,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"2a63c49b-7234-4308-e538-ebbef17b9b24"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["x: (1, 5, 5, 1)\n","[[ 0.11099242 -1.9326555  -1.6480342  -0.49190906 -2.0647085 ]\n"," [ 1.5184957   0.97968435  0.20793976 -0.96044654 -0.46494287]\n"," [-0.02514478  0.07375104 -1.2718252  -0.48478946 -0.8770467 ]\n"," [-0.07051282  0.20574282 -1.3212059   0.28280482  0.8088816 ]\n"," [-0.04469148 -0.26706597  0.57759297 -0.07900484 -1.0243026 ]]\n","pooled_max(Tensorflow): (1, 4, 4, 1)\n","[[ 1.5184957   0.97968435  0.20793976 -0.46494287]\n"," [ 1.5184957   0.97968435  0.20793976 -0.46494287]\n"," [ 0.20574282  0.20574282  0.28280482  0.8088816 ]\n"," [ 0.20574282  0.57759297  0.57759297  0.8088816 ]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"7NZYCqAv9bmp"},"source":["# 2D Average Pooling"]},{"cell_type":"code","metadata":{"id":"kC9Bm36X9bx6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460723614,"user_tz":-540,"elapsed":420,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"75e51b32-bfbd-47ff-cf4d-183f4c499f3f"},"source":["import numpy as np\n","import tensorflow as tf\n","\n","from tensorflow.keras.layers import AveragePooling2D\n","\n","N, n_H, n_W, n_C  = 1, 5, 5, 1\n","f,s =2,1\n","\n","x = tf.random.normal(shape=(N, n_H, n_W, n_C))\n","pool_avg = AveragePooling2D(pool_size=f, strides=s)\n","pooled_avg = pool_avg(x)\n","\n","print(\"x: {}\\n{}\".format(x.shape, x.numpy().squeeze()))\n","print(\"pooled_avg(Tensorflow): {}\\n{}\".format(pooled_avg.shape,\n","                                              pooled_avg.numpy().squeeze()))\n","\n","x = x.numpy().squeeze()\n","pooled_avg_man = np.zeros(shape=(n_H - f + 1, n_W- f + 1))\n","for i in range(n_H - f + 1):\n","    for j in range(n_W - f + 1):\n","      window = x[i : i+f, j : j+f]\n","      pooled_avg_man[i, j] = np.mean(window)\n","\n","print(\"pooled avg(Manual): {}\\n{}\".format(pooled_avg_man.shape,\n","                                          pooled_avg_man))"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["x: (1, 5, 5, 1)\n","[[ 0.36803365  1.4543631   0.3295276  -1.8295835   0.22088364]\n"," [-0.7112074  -1.0528873  -1.2911394   0.09945484  0.7820561 ]\n"," [ 0.20515005  1.8596516  -0.76941675  0.28489465  0.25164145]\n"," [-0.5931462   0.05395875 -0.45503464  0.85311854  0.5116871 ]\n"," [-0.2902155   0.4733398  -0.96330607  1.5588912  -0.11423682]]\n","pooled_avg(Tensorflow): (1, 4, 4, 1)\n","[[ 0.01457551 -0.14003399 -0.6729351  -0.18179724]\n"," [ 0.07517672 -0.31344795 -0.41905165  0.35451174]\n"," [ 0.38140357  0.17228973 -0.02160954  0.47533542]\n"," [-0.08901578 -0.22276054  0.24841726  0.70236504]]\n","pooled avg(Manual): (4, 4)\n","[[ 0.01457551 -0.14003399 -0.67293513 -0.18179724]\n"," [ 0.07517672 -0.31344795 -0.41905165  0.35451174]\n"," [ 0.38140357  0.17228973 -0.02160954  0.47533542]\n"," [-0.08901578 -0.22276054  0.24841726  0.70236504]]\n"]}]}]}