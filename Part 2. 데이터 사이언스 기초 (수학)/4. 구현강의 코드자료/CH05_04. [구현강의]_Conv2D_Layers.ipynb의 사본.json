{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CH05_04. [구현강의]_Conv2D_Layers.ipynb","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"cSWN8WlnDoIk"},"source":["#Shape of Conv Layers"]},{"cell_type":"code","metadata":{"id":"yb192qLjDnPu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460032503,"user_tz":-540,"elapsed":3872,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"d2d6df3d-6ba3-49cf-e270-7dee5f13ec61"},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.layers import Conv2D\n","\n","N, n_H, n_W, n_C = 1, 28, 28, 5\n","n_filter = 1\n","k_size = 3\n","\n","images = tf.random.uniform(minval=0, maxval=1,\n","                          shape=((N, n_H, n_W, n_C)))\n","\n","\n","conv =  Conv2D(filters=n_filter, kernel_size=k_size)\n","\n","y = conv(images)\n","\n","W, B = conv.get_weights()\n","\n","\n","print(images.shape)\n","print(W.shape)\n","print(B.shape)\n","print (y.shape)"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, 28, 28, 5)\n","(3, 3, 5, 1)\n","(1,)\n","(1, 26, 26, 1)\n"]}]},{"cell_type":"markdown","metadata":{"id":"J5ihIUT1Do5t"},"source":["# Correlation Calculation"]},{"cell_type":"code","metadata":{"id":"N8VGxtfyDpJN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460033556,"user_tz":-540,"elapsed":3,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"b6dba749-971f-467d-aa88-18f2d34909b8"},"source":["import numpy as np\n","import tensorflow as tf\n","\n","from tensorflow.keras.layers import Conv2D\n","\n","N, n_H, n_W, n_C = 1, 5, 5, 1\n","n_filter = 1\n","k_size = 3\n","\n","images = tf.random.uniform(minval=0, maxval=1,\n","                           shape=((N, n_H, n_W, n_C)))\n","\n","\n","conv =  Conv2D(filters=n_filter, kernel_size=k_size)\n","\n","y = conv(images)\n","print(\"Y(Tensorflow) : \\n\",y.numpy().squeeze())\n","W, B = conv.get_weights()\n","\n","####\n","image = images.numpy().squeeze()\n","W = W.squeeze()\n","print(images.shape)\n","print(W.shape)\n","print(B.shape)\n"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Y(Tensorflow) : \n"," [[-0.08356953 -0.16641036 -0.0636506 ]\n"," [-0.6531809  -0.22424008 -0.12530202]\n"," [-0.34943646 -0.145248   -0.25425702]]\n","(1, 5, 5, 1)\n","(3, 3)\n","(1,)\n"]}]},{"cell_type":"markdown","metadata":{"id":"jmm7fVt_Dpg1"},"source":["# Correlation with n-channel"]},{"cell_type":"code","metadata":{"id":"AD98OCUKDpuv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658460051766,"user_tz":-540,"elapsed":418,"user":{"displayName":"Shin's Lab","userId":"02243702979524869223"}},"outputId":"410c0818-4359-49b1-ba80-59cafb08c3f3"},"source":["import numpy as np\n","import tensorflow as tf\n","\n","from tensorflow.keras.layers import Conv2D\n","\n","N, n_H, n_W, n_C = 1, 5, 5, 1\n","n_filter = 1\n","k_size = 3\n","\n","images = tf.random.uniform(minval=0, maxval=1,\n","                           shape=((N, n_H, n_W, n_C)))\n","\n","conv = Conv2D(filters=n_filter, kernel_size=k_size)\n","\n","y = conv(images)\n","print(\"Y(Tensorflow): \\n\", y.numpy().squeeze())\n","W, B = conv.get_weights()\n","\n","####\n","images = images.numpy().squeeze()\n","W = W.squeeze()\n","y_man = np.zeros(shape=(n_H - k_size + 1, n_W - k_size + 1))\n","for i in range(n_H - k_size + 1):\n","  for j in range(n_W - k_size + 1):\n","    window = images[i : i+k_size, j : j+k_size]\n","    y_man[i, j] = np.sum(window*W) + B\n","\n","\n","print(\"Y(Manual): \\n\", y_man)"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Y(Tensorflow): \n"," [[-0.84039587 -1.0110141  -0.73171914]\n"," [-1.0938718  -0.86877364 -0.63212675]\n"," [-0.49361214 -1.0244889  -0.8944763 ]]\n","Y(Manual): \n"," [[-0.84039587 -1.0110141  -0.73171914]\n"," [-1.09387183 -0.86877358 -0.63212681]\n"," [-0.49361214 -1.02448893 -0.89447629]]\n"]}]}]}